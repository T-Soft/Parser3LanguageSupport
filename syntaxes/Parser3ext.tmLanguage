<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>p</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\{\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\}</string>
	<key>name</key>
	<string>Parser3ext</string>
	<key>patterns</key>
	<array>

		<!-- PARSER3 GRAMMAR -->

		<dict>
			<key>match</key>
			<string>\^(if|for|eval|process|while|s(witch|leep)|c(a(se|che)|on(nect|tinue))|t(aint|hrow|ry)|u(ntaint|se)|apply-taint|break)\b</string>
			<key>name</key>
			<string>keyword.operator.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\^#[0-9a-fA-F]{2}</string>
			<key>name</key>
			<string>constant.character.parser3ext</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\^rem\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#rem-insider</string>
				</dict>
			</array>
			<key>name</key>
			<string>comment.block.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^#.*</string>
			<key>name</key>
			<string>comment.line.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\^)(\^|\$|;|@|\(|\)|\{|\}|\[|\]|:|"|'|#)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.parser3ext</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>\^[\w\-]+::[\w\-]*\b</string>
			<key>name</key>
			<string>entity.name.function.constructor.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$result\b(?![-_.:])</string>
			<key>name</key>
			<string>variable.language.result.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?<=\[)DEFAULT(?=\])</string>
			<key>name</key>
			<string>variable.language.DEFAULT.parser3ext</string>
		</dict>

		<dict>
			<key>match</key>
			<string>^@[\w\-]*$</string>
			<key>name</key>
			<string>entity.name.function.parser3ext</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(@[\w\-]+)(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.definition.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.string.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])?(\s.*)?$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.string.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.line.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.definition.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#separator</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\]\[</string>
					<key>name</key>
					<string>punctuation.section.string.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bresult\b</string>
					<key>name</key>
					<string>variable.parameter.result.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\blocals\b</string>
					<key>name</key>
					<string>variable.parameter.locals.parser3ext</string>
				</dict>
			</array>
		</dict>


		<dict>
			<key>begin</key>
			<string>\^[\w\-]*</string>
			<key>end</key>
			<string>(\b(?![.:])|\s)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.definition.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\.|:)(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.parser3ext</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.string.parser3ext</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.string.parser3ext</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>name</key>
					<string>meta.parameters.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\.|:)(\$[\w\-]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.parser3ext</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.parser3ext</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(\.|:)[\w\-]*</string>
					<key>name</key>
					<string>entity.name.function.parser3ext</string>
				</dict>
			</array>
		</dict>


		<dict>
			<key>name</key>
			<string>meta.variable.definition.parser3ext</string>
			<key>begin</key>
			<string>(\$)(\{)(\w+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.code.parser3ext</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.other.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.code.parser3ext</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-branch</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>name</key>
			<string>meta.variable.definition.parser3ext</string>
			<key>begin</key>
			<string>\$\.?[\w\-]*</string>
			<key>end</key>
			<string>(\b(?![.:])|\B(?![\w\-\$])|\s)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>variable.other.parser3ext</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-branch</string>
				</dict>
			</array>
		</dict>



		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>(\)|\n(?=^@))</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.parser3ext</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#separator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quoted-string-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quoted-string-double</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)((e|E)(\+|-)?[0-9]+)?))\b</string>
					<key>name</key>
					<string>constant.numeric.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(true|false)\b</string>
					<key>name</key>
					<string>constant.language.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(is|def|in|ne|eq|lt|gt|le|ge)\b</string>
					<key>name</key>
					<string>keyword.operator.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\B(-f|-d)\b</string>
					<key>name</key>
					<string>keyword.operator.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[-!%&amp;&lt;&gt;*+=/\\~|]</string>
					<key>name</key>
					<string>keyword.operator.symbolic.parser3ext</string>
				</dict>
			</array>
			<key>name</key>
			<string>meta.expression.parser3ext</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.string.parser3ext</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#separator</string>
				</dict>
			</array>
			<key>name</key>
			<string>meta.string.parser3ext</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.code.parser3ext</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#separator</string>
				</dict>
			</array>
			<key>name</key>
			<string>meta.code.parser3ext</string>
		</dict>

		<!-- HTML GRAMMAR -->

		<dict>
			<key>begin</key>
			<string>(&lt;)([a-zA-Z0-9:]++)(?=[^&gt;]*&gt;&lt;/\2&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)(&lt;)(/)(\2)(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html.parser3ext</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html.parser3ext</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.html.parser3ext</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.any.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag-stuff</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(&lt;\?)(xml)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.xml.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\?&gt;)</string>
			<key>name</key>
			<string>meta.tag.preprocessor.xml.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag-generic-attribute</string>
				</dict>
				<!-- <dict>
					<key>include</key>
					<string>#string-double-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-single-quoted</string>
				</dict> -->
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>&lt;!--</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>--\s*&gt;</string>
			<key>name</key>
			<string>comment.block.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>--</string>
					<key>name</key>
					<string>invalid.illegal.bad-comments-or-CDATA.html.parser3ext</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>&lt;!</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;</string>
			<key>name</key>
			<string>meta.tag.sgml.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?i:DOCTYPE)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.doctype.html.parser3ext</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=&gt;)</string>
					<key>name</key>
					<string>meta.tag.sgml.doctype.html.parser3ext</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>"[^"&gt;]*"</string>
							<key>name</key>
							<string>string.quoted.double.doctype.identifiers-and-DTDs.html.parser3ext</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[CDATA\[</string>
					<key>end</key>
					<string>]](?=&gt;)</string>
					<key>name</key>
					<string>constant.other.inline-data.html.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\s*)(?!--|&gt;)\S(\s*)</string>
					<key>name</key>
					<string>invalid.illegal.bad-comments-or-CDATA.html.parser3ext</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(&lt;/?)((?i:body|head|html)\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.structure.any.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.structure.any.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag-stuff</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(&lt;/?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\b)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.block.any.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.block.any.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag-stuff</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(&lt;/?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\b)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.inline.any.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>((?: ?/)?&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.inline.any.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag-stuff</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(&lt;/?)([a-zA-Z0-9:]+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.other.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.other.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag-stuff</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#entities</string>
		</dict>

		<!-- SQL GRAMMAR -->

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql.parser3ext</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql.parser3ext</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(create)\s+(aggregate|conversion|database|domain|function|group|(unique\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)(['"`]?)(\w+)\4</string>
			<key>name</key>
			<string>meta.create.sql.parser3ext</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sql.parser3ext</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(drop)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))</string>
			<key>name</key>
			<string>meta.drop.sql.parser3ext</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.table.sql.parser3ext</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.sql.parser3ext</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.other.cascade.sql.parser3ext</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:\s*(drop)\s+(table)\s+(\w+)(\s+cascade)?\b)</string>
			<key>name</key>
			<string>meta.drop.sql.parser3ext</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.sql.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.table.sql.parser3ext</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?i:^\s*(alter)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)</string>
			<key>name</key>
			<string>meta.alter.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b((?:primary|foreign)\s+key|references|on\sdelete(\s+cascade)?|check|constraint)\b)</string>
			<key>name</key>
			<string>storage.modifier.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(select(\s+distinct)?|insert\s+(ignore\s+)?into|update|delete|from|set|where|group\sby|or|like|and|union(\s+all)?|having|order\sby|limit|(inner|cross)\s+join|straight_join|(left|right)(\s+outer)?\s+join|natural(\s+(left|right)(\s+outer)?)?\s+join)\b)</string>
			<key>name</key>
			<string>keyword.other.DML.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(on|((is\s+)?not\s+)?null)\b)</string>
			<key>name</key>
			<string>keyword.other.DDL.create.II.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\bvalues\b)</string>
			<key>name</key>
			<string>keyword.other.DML.II.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(begin(\s+work)?|start\s+transaction|commit(\s+work)?|rollback(\s+work)?)\b)</string>
			<key>name</key>
			<string>keyword.other.LUW.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)</string>
			<key>name</key>
			<string>keyword.other.authorization.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\bin\b)</string>
			<key>name</key>
			<string>keyword.other.data-integrity.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:^\s*(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)</string>
			<key>name</key>
			<string>keyword.other.object-comments.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\bAS\b</string>
			<key>name</key>
			<string>keyword.other.alias.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(DESC|ASC)\b</string>
			<key>name</key>
			<string>keyword.other.order.sql.parser3ext</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html</string>
			<key>match</key>
			<string>(?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b</string>
			<key>name</key>
			<string>support.function.scalar.sql.parser3ext</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html</string>
			<key>match</key>
			<string>(?i)\b(AVG|COUNT|MIN|MAX|SUM)(?=\s*\()</string>
			<key>name</key>
			<string>support.function.aggregate.sql.parser3ext</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\b</string>
			<key>name</key>
			<string>support.function.string.sql.parser3ext</string>
		</dict>
	</array>
	
	<key>repository</key>
	<dict>

		<!-- PARSER 3 -->
		<key>separator</key>
		<dict>
			<key>match</key>
			<string>;</string>
			<key>name</key>
			<string>punctuation.separator.parser3ext</string>
		</dict>
		<key>rem-insider</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#rem-insider</string>
				</dict>
			</array>
		</dict>
		<key>quoted-string-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>string.quoted.single.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>quoted-string-double</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>variable-inline</key>
		<dict>
			<key>begin</key>
			<string>(\.|:)(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.string.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.string.parser3ext</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
			<key>name</key>
			<string>meta.parameters.parser3ext</string>
		</dict>
		<key>variable-branch</key>
		<dict>
			<key>match</key>
			<string>[.:]\$?[\w\-]*</string>
			<key>name</key>
			<string>variable.other.parser3ext</string>
		</dict>	

		<!-- HTML -->

		<key>entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.html.parser3ext</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.html.parser3ext</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>
					<key>name</key>
					<string>constant.character.entity.html.parser3ext</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.html.parser3ext</string>
				</dict>
			</array>
		</dict>
		<!-- <key>string-double-quoted</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#entities</string>
				</dict>
			</array>
		</dict> -->
		<!-- <key>string-single-quoted</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.html.parser3ext</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#entities</string>
				</dict>
			</array>
		</dict> -->
		<key>tag-generic-attribute</key>
		<dict>
			<key>match</key>
			<string>\b([a-zA-Z\-:]+\s*=)</string>
			<key>name</key>
			<string>entity.other.attribute-name.html.parser3ext</string>
		</dict>
		<!-- <key>tag-id-attribute</key>
		<dict>
			<key>begin</key>
			<string>\b(id)\b\s*(=)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.id.html.parser3ext</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.key-value.html.parser3ext</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;='|")</string>
			<key>name</key>
			<string>meta.attribute-with-value.id.html.parser3ext</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.html.parser3ext</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.toc-list.id.html.parser3ext</string>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.html.parser3ext</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.html.parser3ext</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#entities</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.html.parser3ext</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.toc-list.id.html.parser3ext</string>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.html.parser3ext</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.html.parser3ext</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#entities</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict> -->
		<key>tag-stuff</key>
		<dict>
			<key>patterns</key>
			<array>
				<!-- <dict>
					<key>include</key>
					<string>#tag-id-attribute</string>
				</dict> -->
				<dict>
					<key>include</key>
					<string>#tag-generic-attribute</string>
				</dict>
				<!-- <dict>
					<key>include</key>
					<string>#string-double-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-single-quoted</string>
				</dict> -->
			</array>
		</dict>
	</dict>

	<key>scopeName</key>
	<string>source.parser3ext</string>
	<key>uuid</key>
	<string>AF64B54B-CA02-4B85-9D8E-898CD3FF98C8</string>
</dict>
</plist>